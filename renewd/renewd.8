.TH RENEWD 8
.SH NAME
renewd \- renew Kerberos credentials for all users automatically
.SH SYNOPSIS
.B renewd
[-w waittime][ -d ][ -t ]
.SH DESCRIPTION
.I  renewd
renews credentials. It only watches credentials that have been
specifically registered. pam_reg_cc can be used to register 
credentials. Registration is done using a session key (with keyctl).
Thus when the session is finished, the credentials are automatically
removed from being watched.
.PP
This is part of a specific strategy to keep users from losing credentials
or NFS access. The design of sshd, login, libkrb5 and rpc.gssd do
not allow for completely transparent use of Kerberos without agreeing on
some rules.
.PP 
Because multiple login sessions (particularly via sshd) can share the 
same credemtials, you don't do kdestroy on logout, nor can you allow sshd
to do it via GSSAPICleanupCredentials. To avoid having credentials hang
out too long, we are going to set ticket_lifetime in krb5.conf fairly short.
The default parameters for renewd assume it's about an hour. That way
credentials will go away within an hour after logout, but will be renewed
automatically while you're logged in.
.PP 
If we can be sure that credentaisl won't be destroyed, then renewd
can simply keep renewing all active credentials while the user still
has a session alive, with one exception: 
.PP
For NFS to work reliably credentials must be either the primary
credential in KEYRING:persistebt:UID, in a file
in /tmp owned by the user, or in a credential listed in
/etc/gssproxy/gssproxy.conf. We're currently using KEYRING for
interaction logins, and files in /tmp for cron jobs. pam_reg_cc
can (and at Rutgers does) copy the credentials for interactive
sessions to /var/lib/gssproxy/clients/krb5cc_%U, which is used
by gssproxy.
.SH DELETION
.PP
In addition to renewing, renewd can remove out of date credential
files in /tmp. By detault, it will remove files matching /tmp/krb5cc_*
if they don't have an unexpired ticket-granting ticket. 
Regular files that aren't Kerberos credential caches at all but match that
name pattern will be removed.
(This can be changed.)
.PP
You can change the pattern of files that renewd examines for removal
by using the pattern argument. E.g. to look at both /tmp/krb5cc_* and
/tmp/tkt*, in krb5.conf, specify the following. Note that regcomp is
called with no arguments, so this is a "basic regexp." That's why the
\\ is needed before the |
.PP
.nf
[appdefaults]
renewd = {
    pattern = ^krb5cc_\\|^tkt
}
.fi
.PP
Renewd will also examine files in a second directory, typically
/var/lib/gssproxy/clients. See pam_reg_cc for how this is used.
For consistency, it uses the same configuration as pam_reg_cc, e.g.
.pp
.nf
[appdefaults]
register-cc = {
    credcopy = /var/lib/gssproxy/clients/krb5cc_%U
}
.fi
.PP
The pattern renewd looks for replaces %U and %u with wildcards, i.e. ".*".
It is assumed that these character occur only in the file name, not any
of the directory names.
.PP 
By default, renewd removes all regular files (i.e. not directories,
pipes, etc) matching the pattern that aren't
valid credential files. You can use the "delete" parameter to change
this. E.g. the following will cause only valid (but expired) 
credential files to be removed:
.PP
.nf
[appdefaults]
renewd = {
    delete = valid
}
.fi
.PP
delete = none can be used to disable deletion.
.SH OPTIONS
.PP
waittime is the amount of time between successive runs. It defaults
to 50 minutes, which is appropriate for a default ticket lifetime of 1 hour.
.PP
renewd normally detaches from the terminal, and logs to syslog.
If -d is supplied it remains attached to the terminal, and prints
debug and error messasges there. -d can be given more than once
to increase the level of debugging.
.PP
-t will show the current registered tickets and exit
.PP
renewd must run as root. Most Kerberos operations are performed as
the user that owns the cache.
.SH IMPLEMENTATTION
.PP
To do its work, renewd needs to know which credentials are still in 
use. Renewing all credential files in /tmp would probably lead to a
never-ending increae in files there. Renewd currently expects programs
that create tickets to register them by creating a pointer in the
session keyring. That keyring will last as long as there are any 
processes still in existence from the original session. That includes
detached servers that may be started from the session, even after the
interactive part is finished. There is no other mechanism that quite
as clearly has the right lifetime.
.PP
To register credentials you should use pam_reg_cc after any authentication
modules that create Kerberos tickets. Note that pam_kgetcred does its 
own registration, so pam_reg_cc is not needed for services that use
pam_kgetcred (typically cron).
.PP
The keyring implementation is specific to Linux. To implement renewd
for other operating systems you would need to find another way to track all
processes started from a session.
