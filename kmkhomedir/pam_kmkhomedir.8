.TH PAM_KMKHOMEDIR 8
.SH NAME
pam_kmkhomedir \- module to create home directories
.SH DESCRIPTION
.I  pam_kmkhomedir [host=HOSTNAME] [dir=DIR PATTERN] [umask=nnn] [skel=dir]
works with service mkhomedird to create home directories in Kerberized
environments. With Kerberized NFS, no one can create home directories on 
clients, since root has no special access to the file system.
So mkhomedird is run on a server with a conventional mount of the
file system, e.g. the file server. pam_kmkhomedir then talks to
mkhomedird to request home directories to me created.
.PP
pam_kmkhomedir sends mkhomedird the username and directory to be
created. The user must exist. By default, the directory is the user's home directory,
from the passwd entry. Currently the server only supports directories
ending in the user's directory name, e.g. /home/USER
.PP
mkhomedird will be called only if the directory doesn't exist. It will not
be called if the user is in /etc/passwd. This is avoid creating home directories
on NFS file systems for root, ssh, etc. My assumption is that if you manually
put users in /etc/password, you'll also create their home directories.
.PP
The server hostname may be configured in krb5.conf, e.g.
.PP
.nf
[appdefaults]
pam_kmkhomedir = {
     server = myserver.domain.edu
}
.fi
.PP
Alternatively, the hostname may be passed as an argument in the pam file. In addition,
an argument such as "dir=/home/%u" may be used to define the directory name to be
created. Normally the user's home directory is used, but there are times when additional
directories need to be created. In that situation, pam_kmkhomedir can appear more than
once, to create several directories. E.g. we have a file system with a lot more disk
space available, but we don't back it up as much. We want to create directories on
that file system as well as home directories.
.PP
Where NFS mounts aren't reliable, sometimes a user will login when the file system isn't
mounted. To avoid making lots of bogus calls on the server asking to create home directories
in this case, you can configure a "test file." If this file doesn't exist on the file system,
no attenpt will be made to create the home directory. The user will be given an explanation.
To configure this, use the testfile option in appdefaults. E.g.
.PP
.nf
[appdefaults]
pam_kmkhomedir = {
     server = myserver.domain.edu
     testfile = MOUNTED
}
.fi
.PP
The testfile shouldn't have a directory in front of it. It will be assumed to be
present anywhere that has user home directories. This feature is present both
here and in the server. It makes sense to configure it both places.
.PP
If a home directory is created, pam_kmkhomedir will copy files from the skelton
directory into it. The same code is used as in pam_mkhomedir. Note that this copying
occurs on the machine the user is logging into, not the server that actually creates
the directory. As with pam_mkhomedir, there are options to specify the directory
that is copied, and the umask used for copying. The defaults are /etc/skel and 022.
The umask is used somewhat oddly: For each file, start with the mode of the original
file in /etc/skel. Turn on the write bits, 0222. Then turn off the bits specified in
the umask. (This is
what pam_mkhomedir does, although it isn't documented.)
.PP
Note that Redhat seems to be using a modified version of pam_mkhomedir. This one
behaves like (and uses code from) the version from linux-pam.org. The difference
is how the umask argument is used. In both versions it applies to the files
copied from /etc/skel. In the linux-pam.org version the home directory itself
is always created with permissions 0700. In the Redhat version it is created
with 0755, but the umask is applied. This module uses the linux-pam.org version,
so the home directory is always protected 0700.
.PP
.SH "SEE ALSO"
mkhomedird(8)
.SH "NOTES"
The service currently uses TCP port 756.

