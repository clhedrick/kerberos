.TH CREDSERV 8
.SH NAME
credserv \- provide Kerberos credentials for kgetcred or the cron PAM module
.SH SYNOPSIS
.B credserv
[ -d ]
.SH DESCRIPTION
.I  kgetcred
is designed for cron jobs or services that need access to Kerberos
credentials, but don't have an interactive user to supply them.
Kgetcred sends a request to a credserv server. Credserv generates
Kerberos credentials for the user (if the user has authorized it)
and returns them to the client. See below for more informatio
about how credentials are generated. Credserv can either use a 
keytable for the user stored in LDAP, or with proper configuration
it can impersonate the KDC.
.PP
The server stores
its data in LDAP. It uses two attributes.
.PP
csRutgersEduCredservRule can have multiple values. The values look like
.PP
host:principal:flags
.PP
where flags is optional. Currently the only supported option is F, for
forwardable. Each value indicatest that the user is permitted to 
get credentials for that principal on that host. The F option indicates
that the credentials should be forwardable. 
.PP
* in the host field will apply to all hosts
.PP
The purpose of credserv is to generate credentials for a user and return
it to the client. Typically this is a pam module that is handling the
start of cron job. It has two ways to generate credentials. The safe
one is with a key table. Credserv will store a key table for the user
in LDAP. (LDAP had better be set so this data isn't public.) That can
be used to generate credentials. 
.PP
The second approach is to impersonate the KDC. If the configuration
contains impersonate=FILE, that file will be expected to contain the
master key table for generating TGTs. The main advantage of impersonation
is that it works with users that have one-time passwords. AT least with
Refhat's IPA, user key tables don't work for these users.
.PP
Credserv will always attempt to generate a key table for the user and
save it in LDAP, even if impersonation is configured. (It might be a good idea to remove this code if you're
sure you're always going to use impersonation.)
.PP
The LDAP attribute csRutgersEduCredservKeytab stores key tables. There is a separate entry
for each principal that appears in a rule. The value will be of the form
.pp
smith@CS.RUGTGERS.EDU=nnnnnn
.PP
where nnnnn is a key table encoded in base64.
.PP
Credserv has one additional function that is only loosely
related to generatign user credentials: it can generate credentials
for an anonymous user. This can be useful if you have people
with one-time passwords. Doing kinit for a user with a one-time
password requires an existing credential to "armor" the request.
These anonymous credentials can be used for that. (A lot of code
uses credentials from /etc/krb5.keytab. However that only works
for daemons that can read /etc/krb5.keytab. Typically only root
can read it.)
.PP
Because anonymous kinit isn't supported on all systems yet, and it's
needed to armor requests for one-time passwords, this service
also provides a way to get anonymous credentials. If you want to support
this, put a keytab for "anonymous.user"  in /etc/krb5.anonymous.keytab
This user should be added to the system with a random password. It should
not have any privileges, and shouldn't be allowed to login anywhere.
(This username is built into both kgetcred and credserv.)
.PP
Credserv normally detaches from the terminal, and logs to syslog.
If -d is supplied it remains attached to the terminal, and prints
debug and error messasges there.
.PP
Kgetcred can authenticate itself in several ways: for getting
credentials (the default operation), it uses the client's
host principal, from /etc/krb5.keytab. For other operations it uses the the user's own credentials. Privileged
users may kinit as an admin principal.
.PP
Where host prnicipals are used, 
credserv verifies that the hostname in the principal matches the IP
address from which the request came.
.PP
Kgetcred is used to register and unregister principals, i.e. to
define which users can make requests fron credserv (on which host).
It works by talking to credserv, which then adds or removes rules
for the user in LDAP.
.PP
Privileged
users (users in the admin group; see below) may change any
user. The protocol allows user, principal and flags to be passed.
But unprivileged users must have user and principal match the
principal by which they are authenticated, and they may not
specify flags.
.PP
There should be an entry for credserv in the [appdefaults]
section of /etc/krb5.conf. The most common parameters are
.PP
.nf
[appdefaults]
credserv= {
    ldapurl=ldaps://krb1.cs.rutgers.edu,ldaps://krb2.cs.rutgers.edu
    ldapbase=cn=accounts,dc=cs,dc=rutgers,dc=edu
}
.fi
.PP
where ldapurl points to the LDAP server. If omitted you'll get
ldaps://localhost, which may well be appropriate. ldapbase
is the search base for user lookups.
.PP
If you want to be able to do privileged operations, put the
users who are authorized into a group, and then add the name of the group to
/etc/krb5.conf, e.g.
.PP
.nf
[appdefaults]
credserv = {
     admingroup = credadmin
}
.fi
.PP
Note that credserv will actually check the Kerberos principal sent
by kgetcred for the user, not the user's uid. So if you are logged
in as user and kinit as user.admin, credserv will check user.admin.
Because full principals can't appear in groups, you'll want to use
user.admin, not user/admin.
.PP
We've found it desireable to prevent certain hosts from
gettinb credentials for users with * specified for hostname.
In krb5.conf, in the credserv entry, you can add something like
exceptions=128.6.12.0/24. Actually it can be a comma-separated
list of CIDR blocks. Anything host on that subnets won't get
credentials for users that have authorized *. This is a hack, and
could change in the future if our requirements get more complex.
Currently only IPv4 CIDR blocks may be given. You can also include
an address without the / suffix. It will match only that specific
address. These exceptions are only applied to *. If an individual
host is authorized that will still be respected.
.PP
NOTE: You must make a service principal for credserv/HOST on the server
and add it to /etc/krb5.keytab. You also need to add attributes 
csRutgersEduCredservKeytab and csRutgersEduCredservRule to user entries.
There's documentation for IPA on how to do this. You need to create a
new objectclass with these attributes allowed, and configure IPA to
add the objectclass to all user entries. I chose to put the data in
LDAP because LDAP will replicate it to all of the servers.
.SH "OPTIONS"
.TP
.B \-d
do not detach, and print debugging messages
.SH "SEE ALSO"
kgetcred(1)
.SH "IMPLEMENTATION NOTES"
.PP
Currently credserv must be run on the Kerberos server, because it uses
kadmin.local to generate keytabs. This restriction could be removed if the
client sent the user's password to the server. Then ktutil could be
used to make keytabs. However the password would need to be encrypted,
and I'm not convinced I'm competent to do that design.
.SH "INSTALLATION"
.PP
1. install credserv in /usr/sbin, credserv.8 in /usr/share/man/man8, credserv.service in /etc/systemd/system/
.br
2. generate or copy /etc/krb5.anonymous.keytab from anonymous.user
.br
3. edit /etc/krb5.conf to add entry with ldapurl and ldapbase, and probably admingroup
.br
4. add one or more administrative users to the group mentioned in admingroup
.br
5. add service credserv/HOST
.br
6. merge a keytable for the service into /etc/krb5.keytab (ipa-getkeytable to generate the keytable, ktutil to merge it)
.br
7. Add attributes csRutgersEduCredservRule and csRutgersEduCredservRule. See below.
.br
8. add permissions for credserv/HOST to read and write the new attributes. This is best done in the IPA web GUI, under IPA server, Role Based Access Control. You'll need to add a permission that can read and write csRutgersEduCredservRule and csRutgersEduCredservRule, a privilege with that permission, a role with that privilege, and then add the service principal credserv/HOST to the role.
.br
9. If you want to support one-time passwords, use kadmin or kadmin.local to generate a keytable for
krbtgt/REALM@REALM. In krb5.conf, in the section for credserv, add impersonate=FILE pointing to that
file. This is a fairly dangerous option, for two reasons: (1) you MUST use the -norandkey option when
generating the key table. Otherwise kadmin will increment the version number of krbtgt. That will 
likely break your whole system. (2) the file must be protected carefully. With it, a user can generate
a TGT for anyone. I recommend running credserv on the KDC, since the KDC already has this data.
.PP
.SH "ADD ATTRIBUTES"
.PP
Adding attributes may differ depending upon which ldap server you're using. These instructions are for IPA.
.PP
Create a file addattr containing
.PP
.nf
dn: cn=schema
changetype: modify
add: attributetypes
attributeTypes: ( 1.3.6.1.4.1.10962.2.4.2 NAME 'csRutgersEduCredservKeytab' DE
 SC 'Encoded keytab for credserv' SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 X-ORIGI
 N ( 'cs.rutgers.edu' 'user defined' ) )
attributeTypes: ( 1.3.6.1.4.1.10962.2.4.1 NAME 'csRutgersEduCredservRule' DESC
  'Authorization for credserv' SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 X-ORIGIN (
  'cs.rutgers.edu' 'user defined' ) )
-
add: objectclasses
objectClasses: ( 1.3.6.1.4.1.10962.2.4.3 NAME 'csRutgersEduPerson' SUP top AUX
 ILIARY MAY ( csRutgersEduCredservRule $ csRutgersEduCredservKeytab ) X-ORIGIN
  ( 'cs.rutgers.edu' 'user defined' ) )
.fi
.PP
ldapmodify -ZZ -x -D "cn=Directory Manager" -W -H ldap://localhost -f addattr
.PP
You'll have to type the directory manager password.
.PP
In principle you can now do ipa config-mod --addattr=ipaUserObjectClasses=csRutgersEduPerson. However it didn't work
for me. I had to use the following file with ldapmodify
.PP
.nf
dn: cn=ipaConfig,cn=etc,dc=cs,dc=rutgers,dc=edu
changetype:modify
add:ipaUserObjectClasses
ipaUserObjectClasses:csRutgersEduPerson
.fi
.PP
If there are existing users, you'll need to add the objectclass csRutgersEduPerson to them.
.PP
Obviously you can use a different name for your attribute, that doesn't have Rutgers in it. However
the definition of the attribute includes a globally unique ID number (OID). The ID number given here
is registered to the Rutgers CS department. If you change the attribute name you should use
your own OID.
